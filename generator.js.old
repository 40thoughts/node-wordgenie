'use strict';
var sizeof = require('object-sizeof');

class Generator {
  constructor(markovLen) {
    this.markovLen = markovLen;
    //this.stats = new Array();
    this.stats = new Map();
  }
  
  analyse(words) {
    //console.log(words);
    let _letters = new Set();
    let _syllables = new Set();
    //_syllables.add('\r');
    words.forEach((word) => {
      let _word = '\r' + word + '\n';
      //console.log('Word : ' + _word);
      for (let c = 0; c < _word.length; c++) {
        _letters.add(_word[c]);
        //console.log('Letter : ' + _word[c]);
        if (c >= this.markovLen) {
          let _syllable = '';
          for (let x = this.markovLen-1; x >= 0; x--) {
            _syllable += _word[c-x];
            //console.log('Syll : ' + _syllable);
          }
          _syllables.add(_syllable);
        } else {
          let _syllable = '';
          for (let x = c; x >= 0; x--) {
            _syllable += _word[c-x];
            //console.log('Syll : ' + _syllable);
          }
          _syllables.add(_syllable);
        }
      }
    });
    
    /*console.log(_letters);
    console.log(_syllables);*/
    
    _syllables.forEach((syllable) => {
      //console.log('Syll : ' + syllable);
      //this.stats[syllable.length]
      let _syllable = [...syllable];
      parseStrings(_syllable, this.stats, _letters);
      /*let _sylLetter = _syllable.splice(_syllable.length-1,1);
      console.log('YOYO : ' + _sylLetter);
      this.stats[syllable.slice(syllable.length-1)] = new Array();
      console.log('YAYA : ' + _syllable);*/
      
      //this.stats[syllable] = new Array();
      /*////_letters.forEach((letter) => {
        //console.log('Syll : ' + syllable);
        this.stats[syllable][letter] = 0;
      });*/////
    });
    
    //console.log('MAP : ' + JSON.stringify(this.stats, 0, 2));
    //console.log('Return : ' + JSON.stringify(this.stats['\r'], 0, 2));
    //console.log('NewLine : ' + JSON.stringify(this.stats['\n']));
    console.log('Size : ' + sizeof(this.stats));
    
    words.forEach((word) => {
      let _word = '\r' + word + '\n';
      for (let c = 1; c < _word.length; c++) {
        if (c >= this.markovLen) {
          /*let _syllable = '';
          for (let x = this.markovLen-1; x >= 0; x--) {
            _syllable += _word[c-x];
            //console.log('Syll : ' + _syllable);
          }
          _syllables.add(_syllable);*/
        //} else if (c > 0) {
        } else if ((c > 0) && (c < 2)) {
          let _syllable = [..._word];
          console.log('Syll : ' + _syllable);
          let _letter = '';
          for (let x = c; x >= 0; x--) {
            //console.log('SyllX : ' + _syllable);
            _letter = _syllable.splice(c,1);
            //_syllable += _word[c-x];
            //console.log('Syll : ' + _syllable);
            console.log('Letter : ' + _letter);
          }
          //_syllables.add(_syllable);
        }
      }
    });
  }
}


function parseStrings(arr, map, letters) {
  //console.log('DOC : ' + JSON.stringify(map));
  //console.log('Syllable1 : ' + arr);
  //let _letter = arr.splice(arr.length-1,1);
  if (arr.length != 0) {
    let _letter = arr.splice(arr.length-1,1);
    map[_letter] = map[_letter] || new Map();
    parseStrings(arr, map[_letter], letters);
    //console.log('MAP : ' + JSON.stringify(map, 0, 2));
  } else {
    letters.forEach((letter) => {
      map[letter] = 0;
      //console.log(map);
    });
  }
  //console.log('Letter : ' + _letter);
  //console.log('Syllable2 : ' + arr);
  //map.set(`${_letter}`, new Map());
  /*if (arr.length != 0) {
    map[_letter] = map[_letter] || new Map();
    testaaa(arr, map[_letter])
  }*/
  //let _doc = new Set();
  ////_doc[_letter] = ;
  //this.stats[syllable.slice(syllable.length-1)] = new Array();
  /*if (arr.length != 0) {
    //_doc[_letter] = ;
  }*/
      
  //return _doc;
}


module.exports = exports = Generator;
